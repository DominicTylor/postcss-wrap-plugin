{"version":3,"file":"index.es.js","sources":["../src/types/index.ts","../src/wrapPlugin.ts","../src/index.ts"],"sourcesContent":["import { AtRule, Container } from 'postcss';\n\nexport type IWrapSelector = string | string[];\n\nexport enum IHandleRootTags {\n    'replace' = 'replace',\n    'remove' = 'remove',\n}\nexport type IOptions = {\n    wrapSelector: IWrapSelector;\n    handleRootTags?: IHandleRootTags;\n};\n\nexport const isAtRule = (rule: Container): rule is AtRule => {\n    return rule.type === 'atrule';\n};\n","import { Plugin, Rule } from 'postcss';\nimport { IHandleRootTags, IOptions, isAtRule } from './types';\n\nconst checkParameters = ({ wrapSelector, handleRootTags }: IOptions): void => {\n    if (typeof wrapSelector !== 'string' && !Array.isArray(wrapSelector)) {\n        throw new Error(\n            'postcss-wrap-plugin: wrapSelector option should be of type a string or an array.',\n        );\n    }\n\n    if (!wrapSelector.length) {\n        throw new Error('postcss-wrap-plugin: empty wrapSelector option.');\n    }\n\n    if (handleRootTags && typeof handleRootTags !== 'string') {\n        throw new Error(\n            'postcss-wrap-plugin: handleRootTags option incorrect type.',\n        );\n    }\n};\n\nconst ROOT_TAG_REGEXP = /\\b(html|body)\\b/g;\n\nexport class WrapPlugin implements Plugin {\n    public postcssPlugin = 'postcss-wrap-plugin';\n\n    private wrapSelectors: string[];\n    private handleRootTags: IHandleRootTags | null;\n\n    constructor(options: IOptions) {\n        checkParameters(options);\n\n        const { wrapSelector, handleRootTags } = options;\n\n        this.wrapSelectors = Array.isArray(wrapSelector)\n            ? wrapSelector\n            : [wrapSelector];\n        this.handleRootTags = handleRootTags || null;\n    }\n\n    public Rule = (cssRule: Rule): void => {\n        if (this.checkIncludeCssRule(cssRule)) {\n            cssRule.selector = this.wrapCssRuleSelector(cssRule.selector);\n        }\n    };\n\n    private checkIncludeCssRule(cssRule: Rule): boolean {\n        // Do not prefix keyframes rules.\n        if (this.checkIsCssRuleKeyframes(cssRule)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    private checkIsCssRuleKeyframes({ parent }: Rule): boolean {\n        if (parent && isAtRule(parent)) {\n            return parent.name.includes('keyframes');\n        }\n\n        return false;\n    }\n\n    private isRootTag(selector: string): boolean {\n        ROOT_TAG_REGEXP.lastIndex = 0;\n\n        return ROOT_TAG_REGEXP.test(selector);\n    }\n\n    private addWrapToRootSelector(selector: string): string {\n        return this.wrapSelectors\n            .map((wrapSelector: string) => {\n                if (this.handleRootTags === IHandleRootTags['remove']) {\n                    return wrapSelector + selector.replace(ROOT_TAG_REGEXP, '');\n                }\n\n                if (this.handleRootTags === IHandleRootTags['replace']) {\n                    return `${wrapSelector}.${selector}`;\n                }\n\n                throw new Error(\n                    'postcss-wrap-plugin: incorrect value for handleRootTags options',\n                );\n            })\n            .join(', ');\n    }\n\n    private addWrapToSelector(selector: string): string {\n        return this.wrapSelectors\n            .map((wrapSelector: string) => `${wrapSelector} ${selector}`)\n            .join(', ');\n    }\n\n    private wrapCSSSelector(selector: string): string | null {\n        if (selector === '') {\n            return null;\n        }\n\n        if (this.isRootTag(selector) && this.handleRootTags) {\n            return this.addWrapToRootSelector(selector);\n        }\n\n        return this.addWrapToSelector(selector);\n    }\n\n    private wrapCssRuleSelector(cssRuleSelector: string): string {\n        return cssRuleSelector\n            .split(',')\n            .map((selector: string) => this.wrapCSSSelector(selector.trim()))\n            .filter((cssSelector: string | null) => cssSelector)\n            .join(', ');\n    }\n}\n","import { Plugin } from 'postcss';\n\nimport { IOptions } from './types';\nimport { WrapPlugin } from './wrapPlugin';\n\nconst creator = (options: IOptions): Plugin => {\n    return new WrapPlugin(options);\n};\n\ncreator.postcss = true;\n\nexport default creator;\n"],"names":["IHandleRootTags","ROOT_TAG_REGEXP","options","this","cssRule","_this","checkIncludeCssRule","selector","wrapCssRuleSelector","_a","wrapSelector","handleRootTags","Array","isArray","Error","length","checkParameters","wrapSelectors","WrapPlugin","checkIsCssRuleKeyframes","rule","parent","type","name","includes","lastIndex","test","map","replace","join","isRootTag","addWrapToRootSelector","addWrapToSelector","cssRuleSelector","split","wrapCSSSelector","trim","filter","cssSelector","creator","postcss"],"mappings":"AAIA,IAAYA,GAAZ,SAAYA,GACRA,oBACAA,kBAFJ,CAAYA,IAAAA,OASL,ICQDC,EAAkB,gCAQpB,WAAYC,GAAZ,WALOC,mBAAgB,sBAgBhBA,UAAO,SAACC,GACPC,EAAKC,oBAAoBF,KACzBA,EAAQG,SAAWF,EAAKG,oBAAoBJ,EAAQG,YAvCxC,SAACE,OAAEC,iBAAcC,mBACrC,GAA4B,iBAAjBD,IAA8BE,MAAMC,QAAQH,GACnD,MAAM,IAAII,MACN,oFAIR,IAAKJ,EAAaK,OACd,MAAM,IAAID,MAAM,mDAGpB,GAAIH,GAA4C,iBAAnBA,EACzB,MAAM,IAAIG,MACN,8DAcJE,CAAgBd,GAER,IAAAQ,iBAAcC,mBAEtBR,KAAKc,cAAgBL,MAAMC,QAAQH,GAC7BA,EACA,CAACA,GACPP,KAAKQ,eAAiBA,GAAkB,KA2EhD,OAlEYO,gCAAR,SAA4Bd,GAExB,OAAID,KAAKgB,wBAAwBf,IAO7Bc,oCAAR,SAAgCT,OD1CXW,EC0CaC,WAC9B,SAAIA,ID3CaD,EC2CMC,ED1CN,WAAdD,EAAKE,QC2CGD,EAAOE,KAAKC,SAAS,cAM5BN,sBAAR,SAAkBX,GAGd,OAFAN,EAAgBwB,UAAY,EAErBxB,EAAgByB,KAAKnB,IAGxBW,kCAAR,SAA8BX,GAA9B,WACI,OAAOJ,KAAKc,cACPU,KAAI,SAACjB,GACF,GAAIL,EAAKM,iBAAmBX,EAAwB,OAChD,OAAOU,EAAeH,EAASqB,QAAQ3B,EAAiB,IAG5D,GAAII,EAAKM,iBAAmBX,EAAyB,QACjD,OAAUU,MAAgBH,EAG9B,MAAM,IAAIO,MACN,sEAGPe,KAAK,OAGNX,8BAAR,SAA0BX,GACtB,OAAOJ,KAAKc,cACPU,KAAI,SAACjB,GAAyB,OAAGA,MAAgBH,KACjDsB,KAAK,OAGNX,4BAAR,SAAwBX,GACpB,MAAiB,KAAbA,EACO,KAGPJ,KAAK2B,UAAUvB,IAAaJ,KAAKQ,eAC1BR,KAAK4B,sBAAsBxB,GAG/BJ,KAAK6B,kBAAkBzB,IAG1BW,gCAAR,SAA4Be,GAA5B,WACI,OAAOA,EACFC,MAAM,KACNP,KAAI,SAACpB,GAAqB,OAAAF,EAAK8B,gBAAgB5B,EAAS6B,WACxDC,QAAO,SAACC,GAA+B,OAAAA,KACvCT,KAAK,YCzGZU,EAAU,SAACrC,GACb,OAAO,IAAIgB,EAAWhB,IAG1BqC,EAAQC,SAAU"}